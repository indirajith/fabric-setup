# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

---
################################################################################
#
#   Section: Organizations
#
#   - This section defines the different organizational identities which will
#   be referenced later in the configuration.
#
################################################################################
Organizations:

    # SampleOrg defines an MSP using the sampleconfig.  It should never be used
    # in production but may be used as a template for other definitions
    #- &Org0
    #    # DefaultOrg defines the organization which is used in the sampleconfig
    #    # of the fabric.git development environment
    #    Name: org0

    #    # ID to load the MSP definition as
    #    ID: org0MSP

    #    # MSPDir is the filesystem path which contains the MSP configuration
    #    MSPDir: /etc/hyperledger/org0/msp

    #    # Policies defines the set of policies at this level of the config tree
    #    # For organization policies, their canonical path is usually
    #    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    #    Policies:
    #        Readers:
    #            Type: Signature
    #            Rule: "OR('org0MSP.member', 'org0MSP.admin', 'org0MSP.peer', 'org0MSP.client')"
    #        Writers:
    #            Type: Signature
    #            Rule: "OR('org0MSP.member', 'org0MSP.admin', 'org0MSP.client')"
    #        Admins:
    #            Type: Signature
    #            Rule: "OR('org0MSP.admin')"

   - &Org1
        # DefaultOrg defines the organization which is used in the sampleconfig
        # of the fabric.git development environment
      Name: org1MSP

        # ID to load the MSP definition as
      ID: org1MSP

      MSPDir: /etc/hyperledger/org1/msp

        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
      Policies:
         Readers:
            Type: Signature
            Rule: "OR('org1MSP.member', 'org1MSP.admin', 'org1MSP.peer', 'org1MSP.client')"
         Writers:
            Type: Signature
            Rule: "OR('org1MSP.member', 'org1MSP.admin', 'org1MSP.client')"
         Admins:
            Type: Signature
            Rule: "OR('org1MSP.admin')"

        # leave this flag set to true.
      AnchorPeers:
            # AnchorPeers defines the location of peers which can be used
            # for cross org gossip communication.  Note, this value is only
            # encoded in the genesis block in the Application section context
         - Host: peer1-org1.inuit.local
           Port: 7051

   - &Org2
        # DefaultOrg defines the organization which is used in the sampleconfig
        # of the fabric.git development environment
      Name: org2MSP

        # ID to load the MSP definition as
      ID: org2MSP

      MSPDir: /etc/hyperledger/org2/msp

        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
      Policies:
         Readers:
            Type: Signature
            Rule: "OR('org2MSP.member', 'org2MSP.admin', 'org2MSP.peer', 'org2MSP.client')"
         Writers:
            Type: Signature
            Rule: "OR('org2MSP.member', 'org2MSP.admin', 'org2MSP.client')"
         Admins:
            Type: Signature
            Rule: "OR('org2MSP.admin')"

      AnchorPeers:
            # AnchorPeers defines the location of peers which can be used
            # for cross org gossip communication.  Note, this value is only
            # encoded in the genesis block in the Application section context
         - Host: peer1-org2.inuit.local
           Port: 10051

################################################################################
#
#   SECTION: Capabilities
#
#   - This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
    # Channel capabilities apply to both the orderers and the peers and must be
    # supported by both.
    # Set the value of the capability to true to require it.
   Channel: &ChannelCapabilities
        # V1.4.3 for Channel is a catchall flag for behavior which has been
        # determined to be desired for all orderers and peers running at the v1.4.3
        # level, but which would be incompatible with orderers and peers from
        # prior releases.
        # Prior to enabling V1.4.3 channel capabilities, ensure that all
        # orderers and peers on a channel are at v1.4.3 or later.
        # V1_4_3: true
      V1_4_3: true
        # V1.3 for Channel enables the new non-backwards compatible
        # features and fixes of fabric v1.3
      V1_3: false
        # V1.1 for Channel enables the new non-backwards compatible
        # features and fixes of fabric v1.1
      V1_1: false

    # Orderer capabilities apply only to the orderers, and may be safely
    # used with prior release peers.
    # Set the value of the capability to true to require it.
   Orderer: &OrdererCapabilities
        # V1.4.2 for Orderer is a catchall flag for behavior which has been
        # determined to be desired for all orderers running at the v1.4.2
        # level, but which would be incompatible with orderers from prior releases.
        # Prior to enabling V1.4.2 orderer capabilities, ensure that all
        # orderers on a channel are at v1.4.2 or later.
      V1_4_2: true
        # V1.1 for Orderer enables the new non-backwards compatible
        # features and fixes of fabric v1.1
      V1_1: false

    # Application capabilities apply only to the peer network, and may be safely
    # used with prior release orderers.
    # Set the value of the capability to true to require it.
   Application: &ApplicationCapabilities
        # V1.4.2 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.4.2.
      V1_4_2: true
        # V1.3 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.3.
      V1_3: false
        # V1.2 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.2 (note, this need not be set if
        # later version capabilities are set)
      V1_2: false
        # V1.1 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.1 (note, this need not be set if
        # later version capabilities are set).
      V1_1: false
      
################################################################################
#
#   SECTION: Application
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for application related parameters
#
################################################################################
Application: &ApplicationDefaults

    # Organizations is the list of orgs which are defined as participants on
    # the application side of the network
   Organizations:

    # Policies defines the set of policies at this level of the config tree
    # For Application policies, their canonical path is
    #   /Channel/Application/<PolicyName>
   Policies:
      Readers:
         Type: ImplicitMeta
         Rule: "ANY Readers"
      Writers:
         Type: ImplicitMeta
         Rule: "ANY Writers"
      Admins:
         Type: ImplicitMeta
         Rule: "MAJORITY Admins"

   Capabilities:
      <<: *ApplicationCapabilities
################################################################################
#
#   SECTION: Orderer
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters
#
################################################################################
Orderer: &OrdererDefaults

   OrdererType: etcdraft
   Addresses:
      - ord1-org1.inuit.local:7050
      - ord2-org1.inuit.local:7050
      - ord1-org2.inuit.local:7050
      - ord2-org2.inuit.local:8050
   BatchTimeOut: 2s
   BatchSize:
      MaxMessageCount: 10
      AbsoluteMaxBytes: 99 MB
      PreferredMaxBytes: 512 KB
   EtcdRaft:
      Consenters:
      - Host: ord1-org1.inuit.local
        Port: 7050
        ClientTLSCert: /etc/hyperledger/orderers/o1o1/cert.pem
        ServerTLSCert: /etc/hyperledger/orderers/o1o1/cert.pem
      - Host: ord2-org1.inuit.local
        Port: 7050
        ClientTLSCert: /etc/hyperledger/orderers/o2o1/o2o1_cert.pem
        ServerTLSCert: /etc/hyperledger/orderers/o2o1/o2o1_cert.pem
      - Host: ord1-org2.inuit.local
        Port: 7050
        ClientTLSCert: /etc/hyperledger/orderers/o1o2/o1o2_cert.pem
        ServerTLSCert: /etc/hyperledger/orderers/o1o2/o1o2_cert.pem
      - Host: ord2-org2.inuit.local
        Port: 8050
        ClientTLSCert: /etc/hyperledger/orderers/o2o2/cert.pem
        ServerTLSCert: /etc/hyperledger/orderers/o2o2/cert.pem
      Options:
         TickInterval: 500ms
         ElectionTick: 10
         HeartBeatTick: 1
         MaxInflightBlocks: 5
         SnapshotIntervalSize: 20 MB
   Organizations:

    # Policies defines the set of policies at this level of the config tree
    # For Orderer policies, their canonical path is
    #   /Channel/Orderer/<PolicyName>
   Policies:
      Readers:
         Type: ImplicitMeta
         Rule: "ANY Readers"
      Writers:
         Type: ImplicitMeta
         Rule: "ANY Writers"
      Admins:
         Type: ImplicitMeta
         Rule: "MAJORITY Admins"
        # BlockValidation specifies what signatures must be included in the block
        # from the orderer for the peer to validate it.
      BlockValidation:
         Type: ImplicitMeta
         Rule: "ANY Writers"
   Capabilities:
      <<: *OrdererCapabilities

################################################################################
#
#   CHANNEL
#
#   This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
################################################################################
Channel: &ChannelDefaults
    # Policies defines the set of policies at this level of the config tree
    # For Channel policies, their canonical path is
    #   /Channel/<PolicyName>
   Policies:
        # Who may invoke the 'Deliver' API
      Readers:
         Type: ImplicitMeta
         Rule: "ANY Readers"
        # Who may invoke the 'Broadcast' API
      Writers:
         Type: ImplicitMeta
         Rule: "ANY Writers"
        # By default, who may modify elements at this config level
      Admins:
         Type: ImplicitMeta
         Rule: "MAJORITY Admins"

    # Capabilities describes the channel level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
   Capabilities:
      <<: *ChannelCapabilities

################################################################################
#
#   Profile
#
#   - Different configuration profiles may be encoded here to be specified
#   as parameters to the configtxgen tool
#
################################################################################
Profiles:

   TwoOrgsChannel:
      Consortium: SampleConsortium
      Application:
         <<: *ApplicationDefaults
         Organizations:
            - *Org1
            - *Org2

   SampleMultiNodeEtcdRaft:
      Orderer:
         <<: *OrdererDefaults
         Organizations:
            - *Org1
            - *Org2
      Consortiums:
         SampleConsortium:
            Organizations:
               - *Org1
               - *Org2